pipeline {
  agent {
    docker {
      image 'dheeman29/maven-abhishek-docker-agent:v2'
      args '--user root -v /var/run/docker.sock:/var/run/docker.sock' // mount Docker socket to access the host's Docker daemon
    }
  }
  stages {
    stage('Checkout') {
      steps {
        sh 'echo passed'
        git branch: 'main', url: 'https://github.com/Reliable-Royalty-29/Jenkins-Zero-To-Hero.git'
      }
    }
    
    stage('Build and Test') {
      steps {
        echo 'Building the Application Code'
        sh 'ls -ltr'
        // build the project and create a JAR file
        sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn clean package'
      }
    }
    stage('Static Code Analysis') {
      environment {
        SONAR_URL = "http://98.70.33.54:9000/"
      }
      steps {
        echo 'Static Code Analysis Using Sonarqube'
        withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
          sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}'
        }
      }
  
  }
  
      stage('Build and Push to DockerHub') {
      environment {
        docker_Image = "dheeman29/argo-image:${BUILD_NUMBER}"
        registry_cred = credentials('docker-cred')
      }
      steps {
           script{
                
                sh "cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && docker build -t ${Docker_Image} ."
                def dockerImage = docker.image("${Docker_Image}")
                docker.withRegistry('https://index.docker.io/v1/', "docker-cred") {
                dockerImage.push()
            }
                   
  
                
           }
        }
      }
  
  }
}

